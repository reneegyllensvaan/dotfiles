# vim: fdm=marker foldlevel=0

ZSH_DISABLE_COMPFIX="true"
source "$HOME/.profile"
source "$HOME/.user-profile"
source "$HOME/.alias"
source "$HOME/.zfunctions/dir-marks.zsh"
source "$HOME/.zfunctions/miscellaneous.zsh"
source "$HOME/.zfunctions/colors.zsh"
source "$HOME/.zfunctions/git-prompt.zsh"
source "$HOME/.zfunctions/fzf.zsh"
source "$HOME/.zfunctions/fzy.zsh"
source "$HOME/.zfunctions/vim.zsh"
source "$HOME/.zfunctions/nvim.zsh"
source "$HOME/.zfunctions/numeric.zsh"
[ -f "$HOME/.zfunctions/zsh-syntax-highlighting.zsh" ] \
  && source "$HOME/.zfunctions/zsh-syntax-highlighting.zsh"


# Misc {{{

# Set vi mode with no timeout
export KEYTIMEOUT=1; bindkey -v


zmodload zsh/complist
zstyle ':completion:*' menu select
bindkey -M menuselect '^[[Z' reverse-menu-complete

# Set completion to be case-insensitive in unambiguous cases
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# zstyle ':completion:*' matcher-list '' \
#   'm:{a-z\-}={A-Z\_}' \
#   'r:[[:alpha:]]||[[:alpha:]]=** m:{a-z\-}={A-Z\-}'

  # 'r:|?=** m:{a-z\-}={A-Z\_}'  # Case insensitive matching

  #'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
# Misc }}}
# History {{{
export HISTSIZE=10000000
export SAVEHIST=10000000
export HISTFILE="$HOME/.zhistory"

setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP

unsetopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
# }}}

# Make fpath a unique array
typeset -U fpath
fpath+=("/opt/homebrew/share/zsh/site-functions")
fpath+=("/opt/homebrew/share/zsh/functions")
fpath+=("$HOME/.zfunctions")
fpath+=("$HOME/.zfunc")

autoload -U compinit
# cache zsh completions for 22 hours
completion_cache_time=`noglob expr 22 * 3600`
noglob \
  expr `date '+%s'` \
  - `([ -e ~/.zcompdump ] && date -r ~/.zcompdump '+%s' || echo 0)` \
  - $completion_cache_time \
  | grep '-' >/dev/null \
  && compinit -u -C ~/.zcompdump \
  || compinit -u ~/.zcompdump

# Prompt {{{
setopt PROMPT_SUBST

FAILURE_EMOJI=( 👅 💅 🎀 👛 💗 💓 💕 💖 💞 💘 💋 💝 🌺 🌷 🌸 🐷 💒 👄 👠 🌹 🎈 ⏰ 📮 📌 📛 🎯 🍎 🍒 📍 ♨️🚒 🚨 🚗 🚀 )
SUCCESS_EMOJI=( 💚 👒 🐸 🐍 🐢 🐉 🍀 🌵 🍃 🌲 🌴 🌳 🍏 🎾 🔋 🏡 🚛 ✅ )
EMOJI=( 💅 💋 💍 🐱 👻 💄 👑 👒 🐶 🐹 🦊 🐰 🦆 🦄 🦋 🐳 🐍 🐢 ✨ 💫 🌈 💧 🍋 🍉 🍓 🥥 🥝 🥑 🥦 🌶 🥞 🍬 💎 🔮 🎁 💜 💞 )

if [ "$USE_EMOJI" = 'random' ]; then
  function prepend_prompt () {
    echo -n "$EMOJI[$RANDOM%$#EMOJI+1]";
  };
  function precmd () {
    prepend_prompt;
  };

elif [ "$USE_EMOJI" = 'success' ]; then
  function prepend_prompt () {
    if [ $cmd_status = '0' ]; then
      echo -n "$SUCCESS_EMOJI[$RANDOM%$#SUCCESS_EMOJI+1]"
    else
      echo -n "$FAILURE_EMOJI[$RANDOM%$#FAILURE_EMOJI+1]"
    fi
  };
  function precmd () {
    cmd_status="$?"
    prepend_prompt;
  };

else
  function prepend_prompt () { };
fi

[ $RANGER_LEVEL ] && nesting_prompt="(rr $RANGER_LEVEL) " #
[ $NNNLVL ] && nesting_prompt="(nnn $NNNLVL) " #

PROMPT="%{$fg[blue]%}%B%~%{$reset_color%}"
[ $SSH_CLIENT ] \
  && PROMPT="$PROMPT [%n@%m]" \
  || PROMPT="$PROMPT \$(git_prompt_info)"
  PROMPT="$PROMPT"$'$nesting_prompt\$(prepend_prompt)'"%(?.%f.%F{red})\$ %f"

# # Set up the prompt template (multiple lines)
# PROMPT=$'\n'"%{$fg[blue]%}%B%~%{$reset_color%}"
# [ $SSH_CLIENT ] \
#   && PROMPT="$PROMPT [%n@%m]" \
#   || PROMPT="$PROMPT \$(git_prompt_info)"
#   PROMPT="$PROMPT"$'\n$nesting_prompt\$(prepend_prompt) '"%(?.%F{green}.%F{red})> %f "

# prompt }}}
# GnuPG settings {{{
export GPG_TTY="$(tty)"
if [ $GPG_FINGERPRINT ]; then
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  # If gpg-agent is not running, start it and load env
  pgrep gpg-agent >/dev/null || eval $(gpg-agent --options $HOME/.gnupg/gpg-agent.conf --daemon )
fi
# GnuPG settings }}}

[ -f "$HOME/local.zsh" ] && source "$HOME/local.zsh"

# if [[ -r "/usr/local/opt/mcfly/mcfly.zsh" ]]; then
#   export MCFLY_HISTORY=~/.mcflyhist
#   source "/usr/local/opt/mcfly/mcfly.zsh"
#   # export MCFLY_KEY_SCHEME=vim
# fi

# Environment Plugins {{{
[ -e ~/.nix-profile/etc/profile.d/nix.sh ] && source ~/.nix-profile/etc/profile.d/nix.sh
# Environment Plugins }}}
# Options {{{
# autocd: invoking just a directory name as a command will cd to that directory
setopt AUTOCD

# pathdirs: invoking `foo/bar.sh` will run `/usr/bin/foo/bar.sh`
setopt pathdirs

# beep: should we send a beep character on errors?
unsetopt beep
# Options }}}

for f in ~/.zshrc.d/*; do
  source $f
done

true
