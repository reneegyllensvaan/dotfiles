;; vim: fdm=marker

(defcfg
  ;; For Linux
  input  (device-file "/dev/input/by-id/usb-ITE_Tech._Inc._ITE_Device_8910_-event-kbd")
  output (uinput-sink "KMonad output"
    ;; To understand the importance of the following line, see the section on
    ;; Compose-key sequences at the near-bottom of this file.
    "/run/current-system/sw/bin/sleep 1 && /run/current-system/sw/bin/setxkbmap -option compose:ralt")
  cmp-seq ralt  ;; Set the compose key to `RightAlt'

  ;; For Windows
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; For MacOS
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  ;; Comment this is you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd false
)

(defsrc
  grv   1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab   q    w    e    r    t    y    u    i    o    p    [    ]    ret
  caps  a    s    d    f    g    h    j    k    l    ;    '    \
  lsft  lsgt z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt            spc                 ralt prnt      rctl
)

(defalias
  ;; Home row mods (left hand)
  a (tap-hold-next-release 160 a lmet)
  r (tap-hold-next-release 160 r lalt)
  s (tap-hold-next-release 160 s lctl)
  t (tap-hold-next-release 160 t lsft)

  ;; Home row mods (right hand)
  n (tap-hold-next-release 160 n lsft)
  e (tap-hold-next-release 160 e lctl)
  i (tap-hold-next-release 160 i lalt)
  o (tap-hold-next-release 160 o lmet)

  ;; Right Hand Layer Holds
  u (tap-hold-next-release 160 u (layer-toggle sym))
  y (tap-hold-next-release 160 y (layer-toggle num))

  ;; Left Hand Layer Holds
  w (tap-hold-next-release 160 w (layer-toggle nav))

  ;; ISO Left Shift Key Options
  sh (layer-toggle unsugared)
  ;; sh lsft
  ;; spc (tap-hold-next-release 250 spc (layer-toggle unsugared))

)

(deflayer base
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     q   @w    f    p    b    j    l   @u   @y    '    _    _    _
  esc  @a   @r   @s   @t    g    m   @n   @e   @i   @o    _    _
  _ @sh z    x    c    d    v    k    h    ,    .    /    _
  _     _    _              spc                 _    _         _
)

;; Left-hand layers {{{
(deflayer nav
  _     _    _    _    _    _    _    _    _    _    _    _    _ _
  _     _    _    _    _    _    C-Z  C-p  C-c  C-v  C-x  C-z  _ _
  _     _    _    _    _    _    _    left down up  right _    _
  _ _   _    _    _    _    _    ins  home pgdn pgup end  _
  _     _    _              _                   _    _         _
)
;; Left-hand layers }}}

;; Right-hand layers {{{
(deflayer sym
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     {    &    *    \(   }    _    _    _    _    _    _    _    _
  _     :    $    %    ^    +    _    _    _    _    _    _    _
  _ _   ~    !    @    #    |    _    _    _    _    _    _
  _     _    _              _                   _    _         _
)

(deflayer num
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     [    7    8    9    ]    _    _    _    _    _    _    _    _
  _     ;    4    5    6    =    _    _    _    _    _    _    _
  _ _   `    1    2    3    \    _    _    _    _    _    _
  _     _    _              0                   _    _         _
)

(deflayer fn
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     f1   f2   f3   f4   prnt _    _    _    _    _    _    _    _
  _     f5   f6   f7   f8   slck _    _    _    _    _    _    _
  _ _   f9   f10  f11  f12  _    _    _    _    _    _    _
  _     _    _              _                   _    _         _
)

;; Right-hand layers }}}

(deflayer unsugared
  _     _    _    _    _    _    _    _    _    _    _    _    _    _
  _     q    w    f    p    b    j    l    u    y    ;    _    _    _
  _     a    r    s    t    g    m    n    e    i    o    _    _
  _ _   z    x    c    d    v    k    h    ,    .    /    _
  _     _    _              _                   _    _         _
)
