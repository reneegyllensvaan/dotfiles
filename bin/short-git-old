#!/bin/bash

#################################### adding
# g a (add)
if [[ "$1" = "a" ]]
then
  shift;
  git add $@
fi

# g aa (add all)
if [[ "$1" = "aa" ]]
then
  shift;
  git add --all
fi

# g af (add using fzf)
if [[ "$1" = "af" ]]
then
  shift;
  git add $(git status --porcelain | sed -n 's/^ M //gp' | fzf)
fi

# g rf (remove staged file using fzf)
if [[ "$1" = "rf" ]]
then
  shift;
  git reset HEAD $(git status --porcelain | sed -E -n 's/^(M |A |D ) //gp' | fzf)
fi


#################################### status
# g status
if [[ "$1" = "s" ]]
then
  shift;
  git status $@
fi


#################################### committing etc
# g commit
if [[ "$1" = "c" ]]
then
  shift;
  git commit $@
fi


#################################### opening (checking out)
# g open (checkout)
if [[ "$1" = "o" ]]
then
  shift;
  git checkout $@
fi

# g of (open/checkout with fzf)
if [[ "$1" = "of" ]]
then
  shift;
  git checkout $(git branch | sed -E -n 's/^  //gp' | fzf)
fi

# g Reset
if [[ "$1" = "R" ]]
then
  shift;
  git reset $@
fi


# g mash (add all files and commit)
if [[ "$1" = "m" ]]
then
  shift;
  git add .
  git commit
fi


#################################### pushing/pulling
# g pull
if [[ "$1" = "p" ]]
then
  shift;
  git pull $@
fi

# g pull --rebase
if [[ "$1" = "pr" ]]
then
  shift;
  git pull --rebase $@
fi

# g Push
if [[ "$1" = "P" ]]
then
  shift;
  git push $@
fi



#################################### diffing
# g d (diff)
if [[ "$1" = "d" ]]
then
  shift;
  git diff $@
fi

# g dlc (diff last commit)
if [[ "$1" = "dlc" ]]
then
  shift;
  git diff HEAD~1...HEAD $@
fi

# g brdiff (show commit diff between two branches)
if [[ "$1" = "brdiff" ]]
then
  if [ -z "$2" ] 
  then
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative master..HEAD
  else
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative $2..$3
  fi
fi


#################################### logging
# g l (log)
if [[ "$1" = "l" ]]
then
  shift;
  git log $@
fi

#################################### yanking
#   these commands require the CLIPBOARD_COPY defined
#   this envvar should be a command to pipe the data to
# g ylc (yank last commit)
if [[ "$1" = "ylc" ]]
then
  shift;
  git rev-parse HEAD | tr -d '\n' | $CLIPBOARD_COPY
fi
# g yc (yank commit)
if [[ "$1" = "yc" ]]
then
  shift;
  git log --pretty=format:'%h %s' --abbrev-commit |fzf |awk '{print $1}' | tr -d '\n' | $CLIPBOARD_COPY
fi


