--recurse=yes
--tag-relative=yes
--exclude=*.git*
--exclude=.DS_Store
--exclude=*.md
--exclude=*.mkd
--exclude=.vim

# Javascript excludes
--exclude=node_modules
--exclude=package-lock.json
--exclude=tsconfig.json

# Python excludes
--exclude=*.pyc
--exclude=*.pyo
--exclude=bandit.json
--exclude=.mypy_cache
--exclude=.venv
--exclude=.venv2*
--exclude=.venv3*

# Javascript / Typescript
--exclude=package.json
--exclude=package-lock.json

# Work
--exclude=name_match/**/*.json
# Exclude all CSS kinds:
#  c: class
#  i: id
#  s: selector
--kinds-CSS=-cis
# Exclude some javascript:
#  c: class
#  i: id
#  s: selector
# --kinds-Javascript=-cis

# Exclude some JSON types:
# --kinds-JSON=-k

# --langdef=Python
# --langmap=Python:.py
--kinds-Python=-ilz

# Old configs for ctags, might be useful to grab if universal is lacking
# --langdef=Clojure
# --langmap=Clojure:.clj
# --regex-clojure=/\([ \t]*create-ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
# --regex-clojure=/\([ \t]*def[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/d,definition/
# --regex-clojure=/\([ \t]*defn-?[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/f,function/
# --regex-clojure=/\([ \t]*defmacro[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/m,macro/
# --regex-clojure=/\([ \t]*definline[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/i,inline/
# --regex-clojure=/\([ \t]*defmulti[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/a,multimethod definition/
# --regex-clojure=/\([ \t]*defmethod[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/b,multimethod instance/
# --regex-clojure=/\([ \t]*defonce[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/c,definition (once)/
# --regex-clojure=/\([ \t]*defstruct[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/s,struct/
# --regex-clojure=/\([ \t]*intern[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/v,intern/
# --regex-clojure=/\([ \t]*ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/

# --langdef=latex
# --langmap=latex:.tex
# --regex-latex=/^\\tableofcontents/TABLE OF CONTENTS/s,toc/
# --regex-latex=/^\\frontmatter/FRONTMATTER/s,frontmatter/
# --regex-latex=/^\\mainmatter/MAINMATTER/s,mainmatter/
# --regex-latex=/^\\backmatter/BACKMATTER/s,backmatter/
# --regex-latex=/^\\bibliography\{/BIBLIOGRAPHY/s,bibliography/
# --regex-latex=/^\\part[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/PART \2/s,part/
# --regex-latex=/^\\part[[:space:]]*\*[[:space:]]*\{([^}]+)\}/PART \1/s,part/
# --regex-latex=/^\\chapter[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/CHAP \2/s,chapter/
# --regex-latex=/^\\chapter[[:space:]]*\*[[:space:]]*\{([^}]+)\}/CHAP \1/s,chapter/
# --regex-latex=/^\\section[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\. \2/s,section/
# --regex-latex=/^\\section[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\. \1/s,section/
# --regex-latex=/^\\subsection[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\.\. \2/s,subsection/
# --regex-latex=/^\\subsection[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\.\. \1/s,subsection/
# --regex-latex=/^\\subsubsection[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\.\.\. \2/s,subsubsection/
# --regex-latex=/^\\subsubsection[[:space:]]*\*[[:space:]]*\{([^}]+)\}/\.\.\. \1/s,subsubsection/
# --regex-latex=/^\\includegraphics[[:space:]]*(\[[^]]*\])?[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\3/g,graphic+listing/
# --regex-latex=/^\\lstinputlisting[[:space:]]*(\[[^]]*\])?[[:space:]]*(\[[^]]*\])?[[:space:]]*\{([^}]+)\}/\3/g,graphic+listing/
# --regex-latex=/\\label[[:space:]]*\{([^}]+)\}/\1/l,label/
# --regex-latex=/\\ref[[:space:]]*\{([^}]+)\}/\1/r,ref/
# --regex-latex=/\\pageref[[:space:]]*\{([^}]+)\}/\1/p,pageref/

# --langdef=Rust
# --langmap=Rust:.rs
# --regex-Rust=/^[ \t]*(#\[[^\]]\][ \t]*)*(pub[ \t]+|pub\(.*\)[ \t]+)?(extern[ \t]+)?("[^"]+"[ \t]+)?(unsafe[ \t]+)?fn[ \t]+([a-zA-Z0-9_]+)/\6/f,functions,function definitions/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?type[ \t]+([a-zA-Z0-9_]+)/\2/T,types,type definitions/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?enum[ \t]+([a-zA-Z0-9_]+)/\2/g,enum,enumeration names/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?struct[ \t]+([a-zA-Z0-9_]+)/\2/s,structure names/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?mod[ \t]+([a-zA-Z0-9_]+)/\2/m,modules,module names/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?(static|const)[ \t]+(mut[ \t]+)?([a-zA-Z0-9_]+)/\4/c,consts,static constants/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?(unsafe[ \t]+)?trait[ \t]+([a-zA-Z0-9_]+)/\3/t,traits,traits/
# --regex-Rust=/^[ \t]*(pub[ \t]+|pub\(.*\)[ \t]+)?(unsafe[ \t]+)?impl([ \t\n]*<[^>]*>)?[ \t]+(([a-zA-Z0-9_:]+)[ \t]*(<[^>]*>)?[ \t]+(for)[ \t]+)?([a-zA-Z0-9_]+)/\5 \7 \8/i,impls,trait implementations/
# --regex-Rust=/^[ \t]*macro_rules![ \t]+([a-zA-Z0-9_]+)/\1/d,macros,macro definitions/

# --langdef=Go
# --langmap=Go:.go
# --regex-Go=/func([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/d,func/
# --regex-Go=/var[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,var/
# --regex-Go=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/

