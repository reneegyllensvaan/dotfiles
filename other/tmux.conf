# vim: fdm=marker
# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 0
set -sg escape-time 0

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

setw -g mode-keys vi

# mouse behavior
setw -g mouse on
#set -g mouse-select-pane off
#set -g mouse-resize-pane on

set-option -g default-terminal screen-256color

bind-key O set mouse on
bind-key o set mouse off
bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key -n M-` next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key / split-window -h
bind-key - split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer
bind-key Escape copy-mode

bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xc'

set-window-option -g display-panes-time 1500

# Status Bar
set-option -g status-interval 0
set-option -g status-left ''
set-option -g status-right '%l:%M%p'

# Status Bar solarized-dark (default)
set-option -g status-style bg=cyan,fg=black
set-window-option -g window-status-current-style fg=cyan,bg=black

# Border colors
set-option -g pane-active-border-style fg=yellow,bg=yellow
set-option -g pane-border-style fg=cyan

# Set window notifications
setw -g monitor-activity off
set -g visual-activity off

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# https://github.com/laktak/extrakto                                         {{{
run-shell ~/dotfiles/other/tmux-extrakto/extrakto.tmux

# The key binding to open the extrakto selector. Default = tab, none = ''
set -g @extrakto_key "tab"

# The default extract options (word, lines or path/url)
set -g @extrakto_default_opt "word"

# Whether the tmux split will be `v`ertical or `h`orizontal
set -g @extrakto_split_direction "v"

# The size of the tmux split
set -g @extrakto_split_size "7"  # default 7

# Whether you want extrakto to grab data from the recent area, the full pane,
# all current window's recent areas or all current window's full panes. You can
# also set this option to any number you want (or number preceded by "window ",
# e.g. "window 500"), this allows you to grab a smaller amount of data from the
# pane(s) than the pane's limit. For instance, you may have a really big limit
# for tmux history but using the same limit may end up on having slow
# performance on Extrakto.
set -g @extrakto_grab_area "full"

# Set this to whatever clipboard tool you would like extrakto to use to copy
# data into your clipboard. auto will try to choose the correct clipboard for
# your platform.
set -g @extrakto_clip_tool "auto"

# Set this to fg to have your clipboard tool run in a foreground shell
# (enabling copying to clipboard using OSC52).
set -g @extrakto_clip_too_run "bg"

# Set this to path of fzf if it can't be found in your PATH.
set -g @extrakto_fzf_tool "fzf"

# Set this to path of your own tool or auto to use your platforms open
# implementation.
set -g @extrakto_open_tool "auto"

# Key to copy selection to clipboard.
set -g @extrakto_copy_key "enter"

# Key to insert selection.
set -g @extrakto_insert_key "tab"

# extrakto                                                                   }}}
