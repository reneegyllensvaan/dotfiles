#!/bin/zsh
log () {
  #printf "\r$1"
  echo $@
}

if [[ ! -f "./setup" ]]; then
  echo "This script must be run from the directory it's contained in"
  exit
fi

while [ $1 ]; do
  case "$1" in
    "uninstall") uninstall=true;shift;;
    "-r"|"--remove-backups") remove_backups=true;shift;;
    "-f"|"--force-overwrite") force_overwrite=true;shift;;
    "-n"|"--nobuild-templates") nobuild_templates=true;shift;;
    "-h"|"--help")
      echo "Command line arguments:"
      echo "  -r   --remove-backups     Remove old .bak files from safe copy"
      echo "  -f   --force-overwrite    Force overwrite of copied files"
      echo "  -n   --nobuild-templates  Don't rebuild .tmpl.sh files"
      exit;;
    *) echo "Unknown command line option $1";exit;;
  esac
done

log "Sourcing profile and user-profile to make sure we have the latest env..."
source $PWD/shell/profile
source $PWD/shell/user-profile

build_template () {
  if [ ! $nobuild_templates ]; then
    [ -f "$1.tmpl.sh" ] || echo "\nTemplate $1.tmpl.sh not found, skipping. Please fix this!"
    sh "$1.tmpl.sh" > "$1"
  fi
}

symlink () {
  if [ $uninstall ]; then
    [ -L $3 ] && rm $3
    return 0
  fi

  case "$1" in
    dir)
      [ -L $3 ] && rm $3
      ln -s $2 $3
      ;;
    file)
      ln -sf $2 $3
      ;;
  esac
}

# safe copy function that only updates changed files, and takes a backup of changes
safe_copy () {
  # just copy and overwrite if force_overwrite is on
  [ $force_overwrite ] && cat $1 > $2 && return 0
  which shasum >/dev/null 2>/dev/null && hash_command='shasum'
  hash_new=`$hash_command $1 | head -c 40`
  hash_old=`$hash_command $2 | head -c 40`
  if [[ $hash_new = $hash_old ]]; then
    echo "$2 hasn't changed, skipping..."
  else
    [ -f "$2.bak" ] && \
      "$2.bak would be overwritten, please move or delete that file to prevent data loss" && return 1
    [ ! $remove_backups ] && \
      [ -f $2 ] && \
      mv $2 "$2.bak"
    [ $remove_backups ] && rm "$2.bak"
    cp "$1" "$2"
  fi
}

# load git submodules
git submodule update --init zmodules/zsh-syntax-highlighting
git submodule update --init steno/steno-dictionaries

 log "Building shell template files"
build_template $PWD/gpg/gpg.conf
build_template $PWD/gpg/gpg-agent.conf
build_template $PWD/other/gitconfig
build_template $PWD/README.md
build_template $PWD/email/neomuttrc-user
build_template $PWD/nvim/pathspec.vim
build_template $PWD/shell/alias

log "Making the config directory and linking/copying files"
mkdir -p $HOME/.config/

log "  Xorg configs"
symlink file "$PWD/x11/xinitrc" ~/.xinitrc
symlink file "$PWD/x11/xsession" ~/.xsession
symlink dir "$PWD/x11/xres" ~/.xres

log "  Urxvt conf"
mkdir -p $HOME/.urxvt
symlink dir "$PWD/urxvt-ext" $HOME/.urxvt/ext

# using vim as a more lightweight editor atm, nvim as a full editor
log "  Vim directories and conf"
symlink file "$PWD/vimrc" $HOME/.vimrc
mkdir -p $HOME/.vim
mkdir -p $HOME/.vim/blugin
mkdir -p $HOME/.vim/autoload
mkdir -p $HOME/.vim/files
mkdir -p $HOME/.vim/files/swap
mkdir -p $HOME/.vim/files/backup
mkdir -p $HOME/.vim/files/info
mkdir -p $HOME/.vim/files/undo
symlink file "$PWD/other/plug.vim" $HOME/.vim/autoload/plug.vim

log "  Neovim conf"
mkdir -p $HOME/.config
mkdir -p $HOME/.local/share/nvim/site/autoload
mkdir -p $HOME/.local/share/nvim
mkdir -p $HOME/.local/share/nvim/blugin
mkdir -p $HOME/.local/share/nvim/autoload
mkdir -p $HOME/.local/share/nvim/files
mkdir -p $HOME/.local/share/nvim/files/swap
mkdir -p $HOME/.local/share/nvim/files/backup
mkdir -p $HOME/.local/share/nvim/files/info
mkdir -p $HOME/.local/share/nvim/files/undo
symlink dir "$PWD/nvim" $HOME/.config/nvim
symlink file "$PWD/other/plug.vim" $HOME/.local/share/nvim/site/autoload/plug.vim

log "  GPG config"
mkdir -p $HOME/.gnupg
safe_copy "$PWD/gpg/gpg.conf" $HOME/.gnupg/gpg.conf
safe_copy "$PWD/gpg/gpg-agent.conf" $HOME/.gnupg/gpg-agent.conf
mkdir -p $HOME/.ssh
safe_copy "$PWD/other/ssh_config" $HOME/.ssh/config
touch $HOME/.ssh/user_config

log "  Tmux config"
symlink file "$PWD/other/tmux.conf" $HOME/.tmux.conf
symlink file "$PWD/other/tmux-disposable.conf" $HOME/.tmux-disposable.conf

log "  Zsh configs"
symlink file $PWD/shell/zshrc $HOME/.zshrc
symlink dir $PWD/zfunctions $HOME/.zfunctions
symlink dir $PWD/zmodules $HOME/.zmodules

log "  Qutebrowser config"
symlink dir "$PWD/qutebrowser" $HOME/.config/qutebrowser

log "  i3 config"
mkdir -p $HOME/.config/i3
symlink file "$PWD/x11/i3_config" $HOME/.config/i3/config

echo "  zathura config"
mkdir -p $HOME/.config/zathura
symlink file "$PWD/x11/zathurarc" $HOME/.config/zathura/zathurarc

log "  Email config"
symlink file "$PWD/email/neomuttrc-user" $HOME/.neomuttrc-user
symlink file "$PWD/email/neomuttrc-unbind" $HOME/.neomuttrc-unbind
symlink file "$PWD/email/neomuttrc" $HOME/.neomuttrc
symlink file "$PWD/email/notmuch-config" $HOME/.notmuch-config
mkdir -p $HOME/email/work

# echo "  Ranger config"
# mkdir -p $HOME/.config/ranger
# symlink file "$PWD/other/rifle.conf" $HOME/.config/ranger/rifle.conf
# symlink file "$PWD/other/rc.conf" $HOME/.config/ranger/rc.conf

log "  Making sure we have a plover dictionary"
if which node >/dev/null 2>&1; then

  cd steno
  [ -f dict.json ] || node merge-dictionaries.js > dict.json
  cd -
fi

log "  Kitty config"
mkdir -p $HOME/.config/kitty
symlink file "$PWD/x11/kitty.conf" $HOME/.config/kitty/kitty.conf


log "  Other configs"
symlink file "$PWD/other/spacemacs" $HOME/.spacemacs
symlink file "$PWD/other/batrc" $HOME/.batrc
symlink file "$PWD/shell/alias" $HOME/.alias
symlink file "$PWD/shell/profile" $HOME/.profile
symlink file "$PWD/shell/user-profile" $HOME/.user-profile
symlink file "$PWD/x11/compton.conf" $HOME/.config/compton.conf

symlink file "$PWD/other/editorconfig" $HOME/.editorconfig
symlink file "$PWD/other/gitconfig" $HOME/.gitconfig
symlink file "$PWD/other/tigrc" $HOME/.tigrc
symlink file "$PWD/other/ctags" $HOME/.ctags

log "  Symlinking directories"
#TODO make this check for an existing bin dir
symlink dir "$PWD/bin" $HOME/.bin
symlink dir "$PWD/emacs.d" $HOME/.emacs.d

log "  Making the $HOME/.local/bin directory"
mkdir -p $HOME/.local/bin

echo "\n...Finished!"
