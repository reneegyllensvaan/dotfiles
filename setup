#!/bin/zsh
log () {
  #printf "\r$1"
  echo $@
}

if [[ ! -f "./setup" ]]; then
  echo "This script must be run from the directory it's contained in"
  exit 1
fi

if [[ ! -f "./shell/user-profile" ]]; then
  echo "Couldn't find a valid user-profile file, let's make one"
  echo "# Couldn't find 'shell/user-profile' in current directory." > ./shell/user-profile
  echo "# Please set one up based on user-profile.example\n" >> ./shell/user-profile
  cat ./shell/user-profile.example >> ./shell/user-profile

  vim shell/user-profile
  if [ "$?" != "0" ]; then
    echo "  Error: Vim exited with a non-zero exit code, canceling." | grep --color=auto '.*'
    exit 1
  elif [ "$?" != "0" ]; then
    echo "  Vim exited but can't find a user-profile file, canceling." | grep --color=auto '.*'
    exit
  fi
  echo "    Sweet! Let's continue."
fi

while [ $1 ]; do
  case "$1" in
    "uninstall") uninstall=true;shift;;
    "-r"|"--remove-backups") remove_backups=true;shift;;
    "-f"|"--force-overwrite") force_overwrite=true;shift;;
    "-n"|"--nobuild-templates") nobuild_templates=true;shift;;
    "-h"|"--help")
      echo "Command line arguments:"
      echo "  -r   --remove-backups     Remove old .bak files from safe copy"
      echo "  -f   --force-overwrite    Force overwrite of copied files"
      echo "  -n   --nobuild-templates  Don't rebuild .tmpl.sh files"
      exit;;
    *) echo "Unknown command line option $1";exit 1;;
  esac
done

log "Sourcing profile and user-profile to make sure we have the latest env..."
source $PWD/shell/profile
source $PWD/shell/user-profile

build_template () {
  if [ ! $nobuild_templates ]; then
    [ -f "$PWD/$1.tmpl.sh" ] || echo "\nTemplate $1.tmpl.sh not found, skipping. Please fix this!"
    echo "  Building $1.tmpl.sh -> $1"
    sh "$PWD/$1.tmpl.sh" > "$PWD/$1"
  fi
}

symlink () {
  if [ $uninstall ]; then
    [ -L $3 ] && rm $3
    return 0
  fi

  case "$1" in
    "dir")
      if [ -L "$3" ]; then
        rm $3
      elif rmdir "$3" >/dev/null 2>&1; then
        echo "    Found empty directory $3, removing it."
      elif [ -e "$3" ]; then
        echo "  Error: Found non-empty directory $3, please remove or back it up." | grep --color=auto '.*'
        exit 1
      fi
      echo "    Symlinking $2 -> $3"
      ln -sf "$PWD/$2" "$3"
      ;;
    "file")
      if [ -e "$3" ] && [ ! -L "$3" ]; then
        echo "    Found existing file '$3', backing it up as '$3.bak'"
        mv "$PWD/$3" "$PWD/$3.bak"
      fi
      echo "    Symlinking $2 -> $3";
      ln -sf "$PWD/$2" "$3";
      ;;
  esac
}

# safe copy function that only updates changed files, and takes a backup of changes
safe_copy () {
  # just copy and overwrite if force_overwrite is on
  [ $force_overwrite ] && cat $1 > $2 && return 0
  which shasum >/dev/null 2>/dev/null && hash_command='shasum'
  hash_new=`$hash_command $1 | head -c 40`
  hash_old=`$hash_command $2 | head -c 40`
  if [[ $hash_new = $hash_old ]]; then
    echo "    $2 hasn't changed, skipping..."
  else
    [ -f "$2.bak" ] && \
      "$2.bak would be overwritten, please move or delete that file to prevent data loss" && return 1
    [ ! $remove_backups ] && \
      [ -f $2 ] && \
      mv $2 "$2.bak"
    [ $remove_backups ] && rm "$2.bak"
    cp "$1" "$2"
  fi
}

# load git submodules
git submodule update --init zmodules/zsh-syntax-highlighting
#git submodule update --init steno/steno-dictionaries

 log "Building shell template files"
build_template gpg/gpg.conf
build_template gpg/gpg-agent.conf
build_template other/gitconfig
build_template README.md
build_template email/neomuttrc-user
build_template nvim/pathspec.vim
build_template shell/alias

log "Making the config directory and linking/copying files"
mkdir -p $HOME/.config/

log "  Xorg configs"
symlink file "x11/xinitrc" ~/.xinitrc
symlink file "x11/xsession" ~/.xsession
symlink dir "x11/xres" ~/.xres

log "  Urxvt conf"
mkdir -p $HOME/.urxvt
symlink dir "urxvt-ext" $HOME/.urxvt/ext

# using vim as a more lightweight editor atm, nvim as a full editor
log "  Vim directories and conf"
symlink file "vimrc_coc" $HOME/.vimrc
symlink dir "vim" $HOME/.vim

log "  Neovim conf"
mkdir -p $HOME/.config
mkdir -p $HOME/.local/share/nvim/site/autoload
mkdir -p $HOME/.local/share/nvim
mkdir -p $HOME/.local/share/nvim/blugin
mkdir -p $HOME/.local/share/nvim/autoload
mkdir -p $HOME/.local/share/nvim/files
mkdir -p $HOME/.local/share/nvim/files/swap
mkdir -p $HOME/.local/share/nvim/files/backup
mkdir -p $HOME/.local/share/nvim/files/info
mkdir -p $HOME/.local/share/nvim/files/undo
symlink dir "nvim" $HOME/.config/nvim
symlink file "other/plug.vim" $HOME/.local/share/nvim/site/autoload/plug.vim

log "  GPG config"
mkdir -p $HOME/.gnupg
safe_copy "gpg/gpg.conf" $HOME/.gnupg/gpg.conf
safe_copy "gpg/gpg-agent.conf" $HOME/.gnupg/gpg-agent.conf
mkdir -p $HOME/.ssh
safe_copy "other/ssh_config" $HOME/.ssh/config
touch $HOME/.ssh/user_config

log "  Tmux config"
symlink file "other/tmux.conf" $HOME/.tmux.conf
symlink file "other/tmux-disposable.conf" $HOME/.tmux-disposable.conf

log "  Zsh configs"
symlink file shell/zshrc $HOME/.zshrc
symlink dir zfunctions $HOME/.zfunctions
symlink dir zmodules $HOME/.zmodules

log "  Qutebrowser config"
symlink dir "qutebrowser" $HOME/.config/qutebrowser

log "  i3 config"
mkdir -p $HOME/.config/i3
symlink file "x11/i3_config" $HOME/.config/i3/config

echo "  zathura config"
mkdir -p $HOME/.config/zathura
symlink file "x11/zathurarc" $HOME/.config/zathura/zathurarc

log "  Email config"
symlink file "email/neomuttrc-user" $HOME/.neomuttrc-user
symlink file "email/neomuttrc-unbind" $HOME/.neomuttrc-unbind
symlink file "email/neomuttrc" $HOME/.neomuttrc
symlink file "email/notmuch-config" $HOME/.notmuch-config
mkdir -p $HOME/email/work

# echo "  Ranger config"
mkdir -p $HOME/.config/ranger
symlink dir "ranger" $HOME/.config/ranger
# symlink file "ranger/rifle.conf" $HOME/.config/ranger/rifle.conf
# symlink file "ranger/rc.conf" $HOME/.config/ranger/rc.conf

#log "  Making sure we have a plover dictionary"
#if which node >/dev/null 2>&1; then
#
#  cd steno
#  [ -f dict.json ] || node merge-dictionaries.js > dict.json
#  cd -
#fi

log "  Kitty config"
mkdir -p $HOME/.config/kitty
symlink file "x11/kitty.conf" $HOME/.config/kitty/kitty.conf


log "  Other configs"
symlink file "other/spacemacs" $HOME/.spacemacs
symlink file "other/batrc" $HOME/.batrc
symlink file "shell/alias" $HOME/.alias
symlink file "shell/profile" $HOME/.profile
symlink file "shell/user-profile" $HOME/.user-profile
symlink file "x11/picom.conf" $HOME/.config/picom.conf

symlink file "other/editorconfig" $HOME/.editorconfig
symlink file "other/gitconfig" $HOME/.gitconfig
symlink file "other/tigrc" $HOME/.tigrc
symlink file "other/ctags" $HOME/.ctags

log "  Symlinking directories"
#TODO make this check for an existing bin dir
symlink dir "bin" $HOME/.bin
symlink dir "emacs.d" $HOME/.emacs.d

log "  Making the $HOME/.local/bin directory"
mkdir -p $HOME/.local/bin

echo "\n...Finished!"
